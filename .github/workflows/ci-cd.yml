name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache-dependency-path: 'frontend/yarn.lock'

      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: ~/.cache/yarn/v6
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        working-directory: frontend
        run: yarn install --frozen-lockfile

      - name: Run tests
        working-directory: frontend
        run: yarn test

      - name: Build frontend
        working-directory: frontend
        run: yarn build

      - name: Generate changelog
        run: yarn --cwd frontend changelog && mv frontend/CHANGELOG.md CHANGELOG.md

      - name: Cache frontend build
        uses: actions/cache@v4
        id: frontend-cache
        with:
          path: frontend/dist
          key: ${{ runner.os }}-frontend-${{ github.sha }}

  build-backend:
    runs-on: ubuntu-latest
    needs: build-frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle Wrapper
        uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Restore frontend build
        uses: actions/cache@v4
        id: frontend-cache
        with:
          path: frontend/dist
          key: ${{ runner.os }}-frontend-${{ github.sha }}

      - name: Copy frontend assets
        working-directory: backend
        run: rm -rf src/main/resources/static && mkdir -p src/main/resources/static && cp -r ../frontend/dist/* src/main/resources/static/

      - name: Make Gradlew executable
        working-directory: backend
        run: chmod +x ./gradlew

      - name: Build backend
        working-directory: backend
        run: ./gradlew --quiet clean build -x test --no-daemon

      - name: Run CI tests
        working-directory: backend
        run: ./gradlew --quiet citest --no-daemon

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/build/libs/*.jar

  security-scan:
    runs-on: ubuntu-latest
    needs: build-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Security Scan (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          exit-code: '1'
          ignore-unfixed: true

      - name: Run Security Scan (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'backend'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'library'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [ build-frontend, build-backend, security-scan ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore frontend build
        uses: actions/cache@v4
        id: frontend-cache
        with:
          path: frontend/dist
          key: ${{ runner.os }}-frontend-${{ github.sha }}

      - name: Copy frontend assets for Docker
        run: mkdir -p backend/src/main/resources/static && cp -r frontend/dist/* backend/src/main/resources/static/

      - name: Download backend JAR
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: .

      - name: Rename JAR for Docker
        run: mv *-all.jar knca-signer.jar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create GitHub release
        working-directory: backend
        run: ./gradlew :backend:githubRelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
